name: Deploy to ephemeral environment
on:
  pull_request:
    types: [opened, synchronize, reopened, edited]
jobs:
  scaffold:
    runs-on: ubuntu-latest
    env:
      REPOSITORY: ${{ github.event.repository.name }}
      PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
      CANYON_AUTH_TOKEN: ${{ secrets.CANYON_DEMO_CANYON_AUTH_TOKEN_PROD }}
      CANYON_ORG: ${{ secrets.CANYON_DEMO_CANYON_ORG }}
      CANYON_API_URL: ${{ secrets.CANYON_DEMO_CANYON_API_URL_PROD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create environment
        run: ./canyon create environment $REPOSITORY ephemeral-pr-$PULL_REQUEST_NUMBER --set env_type_id=development || true
  
  release:
    needs: scaffold
    runs-on: ubuntu-latest
    env:
      REPOSITORY: ${{ github.event.repository.name }}
      PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
      CANYON_AUTH_TOKEN: ${{ secrets.CANYON_DEMO_CANYON_AUTH_TOKEN_PROD }}
      CANYON_ORG: ${{ secrets.CANYON_DEMO_CANYON_ORG }}
      CANYON_API_URL: ${{ secrets.CANYON_DEMO_CANYON_API_URL_PROD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.CANYON_DEMO_GCP_CREDENTIALS }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker europe-west3-docker.pkg.dev --quiet

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          platforms: linux/amd64
          push: true
          tags: europe-west3-docker.pkg.dev/htc-demo-00-gcp/humanitec/todo-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          platforms: linux/amd64
          push: true
          tags: europe-west3-docker.pkg.dev/htc-demo-00-gcp/humanitec/todo-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Provision infrastructure with Humanitec
        run: ./canyon deploy $REPOSITORY ephemeral-pr-$PULL_REQUEST_NUMBER ./manifest.yaml --no-prompt --output values.yaml

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Extract deployment configuration
        id: parse_yaml
        run: |
          pip install pyyaml
          python -c "
          import yaml
          with open('values.yaml', 'r') as f:
              config = yaml.safe_load(f)
          print(f'::set-output name=bucket-name::{config[\"main\"].get(\"BUCKET_NAME\", \"unspecified\")}')
          print(f'::set-output name=service-account::{config[\"main\"].get(\"SERVICE_ACCOUNT\", \"unspecified\")}')
          print(f'::set-output name=namespace::{config[\"main\"].get(\"NAMESPACE\", \"unspecified\")}')
          "
      
      - name: Install GKE auth plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo 'export USE_GKE_GCLOUD_AUTH_PLUGIN=True' >> $GITHUB_ENV
      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials second-call-demo-gke --region europe-west3 --project htc-demo-00-gcp
      - name: Set up Helm
        uses: azure/setup-helm@v3
      - name: Deploy with Helm
        run: |
          helm upgrade --install todo-app ./helm/todo-app \
            --set image.backend.repository=europe-west3-docker.pkg.dev/htc-demo-00-gcp/humanitec/todo-backend \
            --set image.backend.tag=${{ github.sha }} \
            --set image.frontend.repository=europe-west3-docker.pkg.dev/htc-demo-00-gcp/humanitec/todo-frontend \
            --set image.frontend.tag=${{ github.sha }} \
            --set backend.env.BUCKET_NAME=${{ steps.parse_yaml.outputs.bucket-name }} \
            --set serviceAccount.name=${{ steps.parse_yaml.outputs.service-account }} \
            --set service.type=LoadBalancer \
            --namespace=${{ steps.parse_yaml.outputs.namespace }}



      - name: Wait for service and show URL
        run: |
          echo "Waiting for LoadBalancer IP..."
          for i in {1..30}; do
            IP=$(kubectl get svc todo-app-frontend -n ${{ steps.parse_yaml.outputs.namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$IP" ]; then
              echo "Service is available at IP: $IP"
              echo "APP_IP=$IP" >> $GITHUB_ENV
              echo "ðŸŽ‰ App is ready at http://$IP"
              break
            fi
            echo "Still waiting..."
            sleep 10
          done
